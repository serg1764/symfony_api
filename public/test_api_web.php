<?php

/**
 * –í–µ–±-–≤–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Symfony API
 * –î–æ—Å—Ç—É–ø: http://localhost:8080/test_api_web.php
 */

header('Content-Type: text/html; charset=utf-8');

class ApiTester
{
    private string $baseUrl = 'http://nginx';
    private array $results = [];

    public function runTests(): string
    {
        $output = "<h1>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Symfony API</h1>\n";

        $output .= $this->testHomePage();
        $output .= $this->testTestEndpoint();
        $output .= $this->testGetUsers();
        $output .= $this->testCreateUser();
        $output .= $this->testSystemInfo();
        $output .= $this->testHealthCheck();

        $output .= $this->printResults();
        return $output;
    }

    private function testHomePage(): string
    {
        $output = "<h3>üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...</h3>\n";
        $response = $this->makeRequest('GET', '/');
        
        if ($response && isset($response['status']) && $response['status'] === 'success' && 
            isset($response['data']['version'])) {
            $output .= "<p style='color: green;'>‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            $this->results['home'] = 'PASS';
        } else {
            $output .= "<p style='color: red;'>‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            if (isset($response['error']) && !empty($response['error'])) {
                $output .= "<p>–û—à–∏–±–∫–∞: " . htmlspecialchars($response['error']) . "</p>\n";
            }
            if ($response) {
                $output .= "<p>–û—Ç–≤–µ—Ç: " . htmlspecialchars(json_encode($response)) . "</p>\n";
            }
            $this->results['home'] = 'FAIL';
        }
        return $output;
    }

    private function testTestEndpoint(): string
    {
        $output = "<h3>üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/test...</h3>\n";
        $response = $this->makeRequest('GET', '/api/test');
        
        if ($response && isset($response['status']) && $response['status'] === 'success' && 
            isset($response['data']['id'])) {
            $output .= "<p style='color: green;'>‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            $this->results['test'] = 'PASS';
        } else {
            $output .= "<p style='color: red;'>‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            if (isset($response['error']) && !empty($response['error'])) {
                $output .= "<p>–û—à–∏–±–∫–∞: " . htmlspecialchars($response['error']) . "</p>\n";
            }
            $this->results['test'] = 'FAIL';
        }
        return $output;
    }

    private function testGetUsers(): string
    {
        $output = "<h3>üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</h3>\n";
        $response = $this->makeRequest('GET', '/api/users');
        
        if ($response && isset($response['status']) && $response['status'] === 'success' && 
            isset($response['data']['users']) && count($response['data']['users']) > 0) {
            $output .= "<p style='color: green;'>‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            $this->results['users'] = 'PASS';
        } else {
            $output .= "<p style='color: red;'>‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            if (isset($response['error']) && !empty($response['error'])) {
                $output .= "<p>–û—à–∏–±–∫–∞: " . htmlspecialchars($response['error']) . "</p>\n";
            }
            $this->results['users'] = 'FAIL';
        }
        return $output;
    }

    private function testCreateUser(): string
    {
        $output = "<h3>üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</h3>\n";
        $userData = [
            'name' => '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'email' => 'test@example.com',
            'role' => 'user'
        ];
        
        $response = $this->makeRequest('POST', '/api/users', $userData);
        
        if ($response && isset($response['status']) && $response['status'] === 'success' && 
            isset($response['data']['user'])) {
            $output .= "<p style='color: green;'>‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            $this->results['create_user'] = 'PASS';
        } else {
            $output .= "<p style='color: red;'>‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            if (isset($response['error']) && !empty($response['error'])) {
                $output .= "<p>–û—à–∏–±–∫–∞: " . htmlspecialchars($response['error']) . "</p>\n";
            }
            $this->results['create_user'] = 'FAIL';
        }
        return $output;
    }

    private function testSystemInfo(): string
    {
        $output = "<h3>üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ...</h3>\n";
        $response = $this->makeRequest('GET', '/api/system/info');
        
        if ($response && isset($response['status']) && $response['status'] === 'success' && 
            isset($response['data']['system'])) {
            $output .= "<p style='color: green;'>‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            $this->results['system_info'] = 'PASS';
        } else {
            $output .= "<p style='color: red;'>‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            if (isset($response['error']) && !empty($response['error'])) {
                $output .= "<p>–û—à–∏–±–∫–∞: " . htmlspecialchars($response['error']) . "</p>\n";
            }
            $this->results['system_info'] = 'FAIL';
        }
        return $output;
    }

    private function testHealthCheck(): string
    {
        $output = "<h3>üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è API...</h3>\n";
        $response = $this->makeRequest('GET', '/api/health');
        
        if ($response && isset($response['status']) && $response['status'] === 'success' && 
            isset($response['data']['health_status']) && $response['data']['health_status'] === 'healthy') {
            $output .= "<p style='color: green;'>‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            $this->results['health'] = 'PASS';
        } else {
            $output .= "<p style='color: red;'>‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
            if (isset($response['error']) && !empty($response['error'])) {
                $output .= "<p>–û—à–∏–±–∫–∞: " . htmlspecialchars($response['error']) . "</p>\n";
            }
            $this->results['health'] = 'FAIL';
        }
        return $output;
    }

    private function makeRequest(string $method, string $endpoint, ?array $data = null): ?array
    {
        $url = $this->baseUrl . $endpoint;
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 10);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        
        if ($method === 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            if ($data) {
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
                curl_setopt($ch, CURLOPT_HTTPHEADER, [
                    'Content-Type: application/json',
                    'Content-Length: ' . strlen(json_encode($data))
                ]);
            }
        }
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $error = curl_error($ch);
        curl_close($ch);
        
        if ($response === false) {
            return null;
        }
        
        $decoded = json_decode($response, true);
        return $decoded ?: null;
    }

    private function printResults(): string
    {
        $output = "<h2>üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø</h2>\n";
        
        $passed = 0;
        $total = count($this->results);
        
        foreach ($this->results as $test => $result) {
            $status = $result === 'PASS' ? '‚úÖ' : '‚ùå';
            $color = $result === 'PASS' ? 'green' : 'red';
            $output .= "<p style='color: $color;'>$status $test: $result</p>\n";
            if ($result === 'PASS') $passed++;
        }
        
        $output .= "<hr>\n";
        $output .= "<p><strong>–ò—Ç–æ–≥–æ: $passed/$total —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ</strong></p>\n";
        
        if ($passed === $total) {
            $output .= "<p style='color: green; font-weight: bold;'>üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>\n";
        } else {
            $output .= "<p style='color: orange; font-weight: bold;'>‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.</p>\n";
        }
        
        return $output;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
$tester = new ApiTester();
echo $tester->runTests(); 